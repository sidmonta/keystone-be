# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  subtitle: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  subtitle: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  subtitle: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  subtitle: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Company {
  id: ID!
  email: String
  name: String
  creationDate: DateTime
  expireDate: DateTime
  clients(
    where: ClientWhereInput! = {}
    orderBy: [ClientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Client!]
  clientsCount(where: ClientWhereInput! = {}): Int
  metadata: Metadati
}

input CompanyWhereUniqueInput {
  id: ID
  email: String
  name: String
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IDFilter
  email: StringFilter
  name: StringFilter
  creationDate: DateTimeNullableFilter
  expireDate: DateTimeFilter
  clients: ClientManyRelationFilter
  metadata: MetadatiWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input ClientManyRelationFilter {
  every: ClientWhereInput
  some: ClientWhereInput
  none: ClientWhereInput
}

input CompanyOrderByInput {
  id: OrderDirection
  email: OrderDirection
  name: OrderDirection
  creationDate: OrderDirection
  expireDate: OrderDirection
}

input CompanyUpdateInput {
  email: String
  name: String
  creationDate: DateTime
  expireDate: DateTime
  clients: ClientRelateToManyForUpdateInput
  metadata: MetadatiRelateToOneForUpdateInput
}

input ClientRelateToManyForUpdateInput {
  disconnect: [ClientWhereUniqueInput!]
  set: [ClientWhereUniqueInput!]
  create: [ClientCreateInput!]
  connect: [ClientWhereUniqueInput!]
}

input MetadatiRelateToOneForUpdateInput {
  create: MetadatiCreateInput
  connect: MetadatiWhereUniqueInput
  disconnect: Boolean
}

input CompanyUpdateArgs {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateInput!
}

input CompanyCreateInput {
  email: String
  name: String
  creationDate: DateTime
  expireDate: DateTime
  clients: ClientRelateToManyForCreateInput
  metadata: MetadatiRelateToOneForCreateInput
}

input ClientRelateToManyForCreateInput {
  create: [ClientCreateInput!]
  connect: [ClientWhereUniqueInput!]
}

input MetadatiRelateToOneForCreateInput {
  create: MetadatiCreateInput
  connect: MetadatiWhereUniqueInput
}

type Client {
  id: ID!
  email: String
  username: String
  creationDate: DateTime
  azienda: Company
  expireDate: DateTime
  impianti(
    where: InstallationWhereInput! = {}
    orderBy: [InstallationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Installation!]
  impiantiCount(where: InstallationWhereInput! = {}): Int
  role: String
}

input ClientWhereUniqueInput {
  id: ID
  email: String
  username: String
}

input ClientWhereInput {
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
  id: IDFilter
  email: StringFilter
  username: StringFilter
  creationDate: DateTimeNullableFilter
  azienda: CompanyWhereInput
  expireDate: DateTimeFilter
  impianti: InstallationManyRelationFilter
  role: StringNullableFilter
}

input InstallationManyRelationFilter {
  every: InstallationWhereInput
  some: InstallationWhereInput
  none: InstallationWhereInput
}

input ClientOrderByInput {
  id: OrderDirection
  email: OrderDirection
  username: OrderDirection
  creationDate: OrderDirection
  expireDate: OrderDirection
  role: OrderDirection
}

input ClientUpdateInput {
  email: String
  username: String
  creationDate: DateTime
  azienda: CompanyRelateToOneForUpdateInput
  expireDate: DateTime
  impianti: InstallationRelateToManyForUpdateInput
  role: String
}

input CompanyRelateToOneForUpdateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
}

input InstallationRelateToManyForUpdateInput {
  disconnect: [InstallationWhereUniqueInput!]
  set: [InstallationWhereUniqueInput!]
  create: [InstallationCreateInput!]
  connect: [InstallationWhereUniqueInput!]
}

input ClientUpdateArgs {
  where: ClientWhereUniqueInput!
  data: ClientUpdateInput!
}

input ClientCreateInput {
  email: String
  username: String
  creationDate: DateTime
  azienda: CompanyRelateToOneForCreateInput
  expireDate: DateTime
  impianti: InstallationRelateToManyForCreateInput
  role: String
}

input CompanyRelateToOneForCreateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

input InstallationRelateToManyForCreateInput {
  create: [InstallationCreateInput!]
  connect: [InstallationWhereUniqueInput!]
}

type Installation {
  id: ID!
  client: Client
  annoMessaInServizio: Int
  esposizioneImpianto: String
  inverter: String
  marcaPannelli: String
  name: String
  potenzaPannelli: Int
}

input InstallationWhereUniqueInput {
  id: ID
  name: String
}

input InstallationWhereInput {
  AND: [InstallationWhereInput!]
  OR: [InstallationWhereInput!]
  NOT: [InstallationWhereInput!]
  id: IDFilter
  client: ClientWhereInput
  annoMessaInServizio: IntNullableFilter
  esposizioneImpianto: StringNullableFilter
  inverter: StringFilter
  marcaPannelli: StringFilter
  name: StringFilter
  potenzaPannelli: IntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input InstallationOrderByInput {
  id: OrderDirection
  annoMessaInServizio: OrderDirection
  esposizioneImpianto: OrderDirection
  inverter: OrderDirection
  marcaPannelli: OrderDirection
  name: OrderDirection
  potenzaPannelli: OrderDirection
}

input InstallationUpdateInput {
  client: ClientRelateToOneForUpdateInput
  annoMessaInServizio: Int
  esposizioneImpianto: String
  inverter: String
  marcaPannelli: String
  name: String
  potenzaPannelli: Int
}

input ClientRelateToOneForUpdateInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
  disconnect: Boolean
}

input InstallationUpdateArgs {
  where: InstallationWhereUniqueInput!
  data: InstallationUpdateInput!
}

input InstallationCreateInput {
  client: ClientRelateToOneForCreateInput
  annoMessaInServizio: Int
  esposizioneImpianto: String
  inverter: String
  marcaPannelli: String
  name: String
  potenzaPannelli: Int
}

input ClientRelateToOneForCreateInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
}

type Metadati {
  id: ID!
  address: String
  email: String
  housePhone: String
  companyLogo: ImageFieldOutput
  logo: String
  mobilePhone: String
  officialName: String
  website: String
  other: JSON
  company(
    where: CompanyWhereInput! = {}
    orderBy: [CompanyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Company!]
  companyCount(where: CompanyWhereInput! = {}): Int
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input MetadatiWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input MetadatiWhereInput {
  AND: [MetadatiWhereInput!]
  OR: [MetadatiWhereInput!]
  NOT: [MetadatiWhereInput!]
  id: IDFilter
  address: StringFilter
  email: StringFilter
  housePhone: StringFilter
  logo: StringFilter
  mobilePhone: StringFilter
  officialName: StringFilter
  website: StringFilter
  company: CompanyManyRelationFilter
}

input CompanyManyRelationFilter {
  every: CompanyWhereInput
  some: CompanyWhereInput
  none: CompanyWhereInput
}

input MetadatiOrderByInput {
  id: OrderDirection
  address: OrderDirection
  email: OrderDirection
  housePhone: OrderDirection
  logo: OrderDirection
  mobilePhone: OrderDirection
  officialName: OrderDirection
  website: OrderDirection
}

input MetadatiUpdateInput {
  address: String
  email: String
  housePhone: String
  companyLogo: ImageFieldInput
  logo: String
  mobilePhone: String
  officialName: String
  website: String
  other: JSON
  company: CompanyRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CompanyRelateToManyForUpdateInput {
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  create: [CompanyCreateInput!]
  connect: [CompanyWhereUniqueInput!]
}

input MetadatiUpdateArgs {
  where: MetadatiWhereUniqueInput!
  data: MetadatiUpdateInput!
}

input MetadatiCreateInput {
  address: String
  email: String
  housePhone: String
  companyLogo: ImageFieldInput
  logo: String
  mobilePhone: String
  officialName: String
  website: String
  other: JSON
  company: CompanyRelateToManyForCreateInput
}

input CompanyRelateToManyForCreateInput {
  create: [CompanyCreateInput!]
  connect: [CompanyWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCompany(data: CompanyCreateInput!): Company
  createCompanies(data: [CompanyCreateInput!]!): [Company]
  updateCompany(
    where: CompanyWhereUniqueInput!
    data: CompanyUpdateInput!
  ): Company
  updateCompanies(data: [CompanyUpdateArgs!]!): [Company]
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteCompanies(where: [CompanyWhereUniqueInput!]!): [Company]
  createClient(data: ClientCreateInput!): Client
  createClients(data: [ClientCreateInput!]!): [Client]
  updateClient(where: ClientWhereUniqueInput!, data: ClientUpdateInput!): Client
  updateClients(data: [ClientUpdateArgs!]!): [Client]
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteClients(where: [ClientWhereUniqueInput!]!): [Client]
  createInstallation(data: InstallationCreateInput!): Installation
  createInstallations(data: [InstallationCreateInput!]!): [Installation]
  updateInstallation(
    where: InstallationWhereUniqueInput!
    data: InstallationUpdateInput!
  ): Installation
  updateInstallations(data: [InstallationUpdateArgs!]!): [Installation]
  deleteInstallation(where: InstallationWhereUniqueInput!): Installation
  deleteInstallations(where: [InstallationWhereUniqueInput!]!): [Installation]
  createMetadati(data: MetadatiCreateInput!): Metadati
  createMetadatis(data: [MetadatiCreateInput!]!): [Metadati]
  updateMetadati(
    where: MetadatiWhereUniqueInput!
    data: MetadatiUpdateInput!
  ): Metadati
  updateMetadatis(data: [MetadatiUpdateArgs!]!): [Metadati]
  deleteMetadati(where: MetadatiWhereUniqueInput!): Metadati
  deleteMetadatis(where: [MetadatiWhereUniqueInput!]!): [Metadati]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  companies(
    where: CompanyWhereInput! = {}
    orderBy: [CompanyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Company!]
  company(where: CompanyWhereUniqueInput!): Company
  companiesCount(where: CompanyWhereInput! = {}): Int
  clients(
    where: ClientWhereInput! = {}
    orderBy: [ClientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Client!]
  client(where: ClientWhereUniqueInput!): Client
  clientsCount(where: ClientWhereInput! = {}): Int
  installations(
    where: InstallationWhereInput! = {}
    orderBy: [InstallationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Installation!]
  installation(where: InstallationWhereUniqueInput!): Installation
  installationsCount(where: InstallationWhereInput! = {}): Int
  metadatis(
    where: MetadatiWhereInput! = {}
    orderBy: [MetadatiOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Metadati!]
  metadati(where: MetadatiWhereUniqueInput!): Metadati
  metadatisCount(where: MetadatiWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
